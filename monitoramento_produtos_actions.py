import os
import json
import time
import datetime  # Mantenha esta importa√ß√£o
from datetime import timedelta  # Adicione esta importa√ß√£o
import base64
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font, Border, Side, Alignment, PatternFill
from openpyxl.utils import get_column_letter

# Fun√ß√£o auxiliar para obter o hor√°rio correto
def get_local_time():
    """Retorna o hor√°rio atual ajustado para UTC-3 (Bras√≠lia)"""
    return datetime.datetime.now() - timedelta(hours=3)

# Configura√ß√µes do Telegram (removi os valores hardcoded por seguran√ßa)
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

# Configura√ß√µes do GitHub
GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
GITHUB_REPOSITORY = os.environ.get('GITHUB_REPOSITORY')
GITHUB_ACTOR = os.environ.get('GITHUB_ACTOR')

# ... (mantenha todas as outras fun√ß√µes como est√£o, exceto pelas substitui√ß√µes abaixo)

# Substitua todas as ocorr√™ncias de datetime.timedelta(hours=3) por get_local_time()

# Na fun√ß√£o salvar_estado_produtos:
def salvar_estado_produtos(dados_produtos):
    """Salva o estado atual dos produtos para compara√ß√£o futura"""
    arquivo_estado = 'estado_produtos.json'
    
    estado = {}
    for produto in dados_produtos:
        chave = f"{produto['Se√ß√£o']}|{produto['Produto']}"
        estado[chave] = {
            'Pre√ßo': produto['Pre√ßo'],
            'Descri√ß√£o': produto.get('Descri√ß√£o', ''),
            'Status': produto.get('Status', 'ON'),
            '√öltima verifica√ß√£o': get_local_time().strftime('%Y-%m-%d %H:%M:%S')  # Modificado aqui
        }
    
    with open(arquivo_estado, 'w', encoding='utf-8') as f:
        json.dump(estado, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ Estado atual salvo com {len(estado)} produtos")
    fazer_upload_github(arquivo_estado, arquivo_estado)
    return estado

# Na fun√ß√£o gerar_dashboard_html:
def gerar_dashboard_html(historico):
    """Gera um dashboard HTML com o status de todos os produtos e hist√≥rico"""
    arquivo_dashboard = 'index.html'
    
    # ... (c√≥digo anterior mantido)
    
    html = f"""
    <!DOCTYPE html>
    <html lang="pt-BR">
    <head>
        <!-- ... (cabe√ßalho mantido) -->
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>Dashboard de Produtos iFood</h1>
                <p class="timestamp">√öltima atualiza√ß√£o: {get_local_time().strftime('%d/%m/%Y %H:%M:%S')}</p>  <!-- Modificado aqui -->
            </div>
            <!-- ... (restante do HTML mantido) -->
    """
    # ... (restante da fun√ß√£o mantido)

# Na fun√ß√£o enviar_alerta_telegram:
def enviar_alerta_telegram(mensagem, produtos_off=None, produtos_desaparecidos=None, total_produtos_ativos=0, todos_produtos=None):
    """Envia alerta para um grupo no Telegram"""
    try:
        texto = f"üö® ALERTA: Monitoramento de Produtos iFood üö®\n\n"
        texto += f"Data/Hora: {get_local_time().strftime('%d/%m/%Y %H:%M:%S')}\n\n"  # Modificado aqui
        # ... (restante da fun√ß√£o mantido)

# Na fun√ß√£o salvar_log:
def salvar_log(mensagem):
    """Salva mensagem de log em arquivo"""
    arquivo_log = 'monitoramento_log.txt'
    baixar_arquivo_github(arquivo_log)
    
    timestamp = get_local_time().strftime('%Y-%m-%d %H:%M:%S')  # Modificado aqui
    
    with open(arquivo_log, 'a', encoding='utf-8') as f:
        f.write(f"[{timestamp}] {mensagem}\n")
    
    fazer_upload_github(arquivo_log, arquivo_log)

# Na fun√ß√£o monitorar_produtos:
def monitorar_produtos():
    """Fun√ß√£o principal para monitorar produtos"""
    timestamp = get_local_time().strftime('%Y-%m-%d %H:%M:%S')  # Modificado aqui
    print(f"\nüîç Iniciando monitoramento de produtos em {timestamp}")
    salvar_log(f"Iniciando monitoramento de produtos")
    
    # ... (restante da fun√ß√£o mantido)

# ... (mantenha o restante do c√≥digo igual)

if __name__ == "__main__":
    # Executar monitoramento
    resultado = monitorar_produtos()
    
    # Imprimir resumo
    if resultado:
        print("\nüìã Resumo do monitoramento:")
        print(f"- Total de produtos: {resultado['total_produtos']}")
        print(f"- Produtos OFF: {len(resultado['produtos_off'])}")
        print(f"- Produtos desaparecidos: {len(resultado['produtos_desaparecidos'])}")
        print(f"- Produtos ativos: {resultado['total_produtos_ativos']}")
        print(f"- Timestamp: {resultado['timestamp']}")
